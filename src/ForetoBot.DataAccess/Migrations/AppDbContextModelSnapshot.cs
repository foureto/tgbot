// <auto-generated />
using System;
using ForetoBot.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ForetoBot.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ForetoBot.DataAccess.Domain.Games.DomanCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DescriptionSoundId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DomanCategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TitleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TitleSoundId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionSoundId");

                    b.HasIndex("DomanCategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("TitleId");

                    b.HasIndex("TitleSoundId");

                    b.ToTable("DomanCards");
                });

            modelBuilder.Entity("ForetoBot.DataAccess.Domain.Games.DomanCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NameId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("LabelId");

                    b.HasIndex("NameId");

                    b.ToTable("DomanCategories");
                });

            modelBuilder.Entity("ForetoBot.DataAccess.Domain.References.StoredFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Text")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ForetoBot.DataAccess.Domain.References.StoredText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("En")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Ru")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("ForetoBot.DataAccess.Domain.Games.DomanCard", b =>
                {
                    b.HasOne("ForetoBot.DataAccess.Domain.References.StoredFile", "DescriptionSound")
                        .WithMany()
                        .HasForeignKey("DescriptionSoundId");

                    b.HasOne("ForetoBot.DataAccess.Domain.Games.DomanCategory", null)
                        .WithMany("Cards")
                        .HasForeignKey("DomanCategoryId");

                    b.HasOne("ForetoBot.DataAccess.Domain.References.StoredFile", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("ForetoBot.DataAccess.Domain.References.StoredText", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.HasOne("ForetoBot.DataAccess.Domain.References.StoredFile", "TitleSound")
                        .WithMany()
                        .HasForeignKey("TitleSoundId");

                    b.Navigation("DescriptionSound");

                    b.Navigation("Image");

                    b.Navigation("Title");

                    b.Navigation("TitleSound");
                });

            modelBuilder.Entity("ForetoBot.DataAccess.Domain.Games.DomanCategory", b =>
                {
                    b.HasOne("ForetoBot.DataAccess.Domain.References.StoredText", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("ForetoBot.DataAccess.Domain.References.StoredFile", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId");

                    b.HasOne("ForetoBot.DataAccess.Domain.References.StoredText", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.Navigation("Description");

                    b.Navigation("Label");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("ForetoBot.DataAccess.Domain.Games.DomanCategory", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
